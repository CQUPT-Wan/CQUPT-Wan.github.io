<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CQUPT-Wan</title>
  
  <subtitle>I love u 3000 times</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cqupt-wan.github.io/"/>
  <updated>2019-05-24T02:40:49.238Z</updated>
  <id>https://cqupt-wan.github.io/</id>
  
  <author>
    <name>CQUPT-Wan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&#39;ssss&#39;</title>
    <link href="https://cqupt-wan.github.io/20190524-null.html"/>
    <id>https://cqupt-wan.github.io/20190524-null.html</id>
    <published>2019-05-24T00:56:44.000Z</published>
    <updated>2019-05-24T02:40:49.238Z</updated>
    
    <content type="html"><![CDATA[<p>sdasdasf</p><p>adsasd</p><p>asdasd</p><script type="math/tex;mode=display">utyj2<5</script><pre><code>>1.</code></pre><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;sdasdasf&lt;/p&gt;&lt;p&gt;adsasd&lt;/p&gt;&lt;p&gt;asdasd&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;utyj2&lt;5&lt;/script&gt;&lt;pre&gt;&lt;code&gt;
&gt;1.
&lt;/code&gt;&lt;/pre&gt;&lt;!-- rebuild by
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>剑指offer（1-10）</title>
    <link href="https://cqupt-wan.github.io/20190523-sword-to-offer-1.html"/>
    <id>https://cqupt-wan.github.io/20190523-sword-to-offer-1.html</id>
    <published>2019-05-23T11:19:24.000Z</published>
    <updated>2019-05-24T02:45:25.240Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网剑指offer编程实践1-10题</p><h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数</p><p>解答：</p><p>方法1：遍历整个二维数组，判断数组中是否含有该整数</p><p>方法2：从二维数组的左下角tag开始判断，如果目标整数大于tag，tag右移，如果目标整数小于tag，tag上移。如果相等返回True</p><pre><code class="lang-python">class Solution:    # array 二维列表    def Find(self, target, array):        for i in array:            if target in i:                return True        return False    def Find(self, target, array):        raw = len(array)        col = len(array[0])        i = raw - 1        j = 0        while i >= 0 and j &lt; col:            if array[i][j] &lt; target:                j += 1            elif array[i][j] > target:                i -= 1            else:                return True        return False</code></pre><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p>请实现一个函数，将一个字符串中的每个空格替换成<code>%20</code>。例如，当字符串为<code>We Are Happy.</code>则经过替换之后的字符串为<code>We%20Are%20Happy</code>。</p><p>解答：</p><p>方法1：将字符串s变换成list，将list中的空格替换成“%20”，然后将list转换成字符串输出。缺点：不是原来的字符串s</p><p>方法2：先遍历以便字符串s，判断有多少个空格，然后从后往前开始替换。</p><pre><code class="lang-python"># -*- coding:utf-8 -*-class Solution:    # s 源字符串    def replaceSpace(self, s):        # write code here        s = list(s)        for i in range(len(s)):            if s[i] == ' ':                s[i] = '%20'        return ''.join(s)</code></pre><h1 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h1><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。注意：自定义的listNode函数不能直接使用len()，使用while listNode:</p><p>解答：</p><p>方法1：使用一个栈，遍历链表进行进栈，然后出栈到ArrayList</p><p>方法2：遍历链表到list，然后利用list[::-1]进行输出</p><pre><code class="lang-python"># -*- coding:utf-8 -*-# class ListNode:#     def __init__(self, x):#         self.val = x#         self.next = Noneclass Solution:    # 返回从尾部到头部的列表值序列，例如[1,2,3]    def printListFromTailToHead(self, listNode):        # write code here        if listNode is None:            return []        tmp = []        while listNode:            tmp.append(listNode.val)            listNode = listNode.next        return tmp[::-1]</code></pre><h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><p>解答：</p><p>方法：根据前序遍历第一个元素找到根节点，然后在中序遍历中找到根节点的index，index左边的为根节点的左子树，index右边的为根节点的右子树。然后在两个遍历中截取两个子树进行迭代</p><p>注意：要返回二叉树，而不是数组，</p><pre><code class="lang-python"># -*- coding:utf-8 -*-# class TreeNode:#     def __init__(self, x):#         self.val = x#         self.left = None#         self.right = Noneclass Solution:    # 返回构造的TreeNode根节点    def reConstructBinaryTree(self, pre, tin):        # write code here        if len(pre) == 0:            return None        else:            root = TreeNode(pre[0])            tag = tin.index(pre[0])            root.left = self.reConstructBinaryTree(pre[1:tag+1],tin[0:tag])            root.right = self.reConstructBinaryTree(pre[tag+1:],tin[tag+1:])        return root</code></pre><h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><p>1、用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><p>解答：</p><p>方法：队列的Push操作就是一个栈A的进栈</p><p>队列的Pop操作，判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，栈B出栈；如果不为空，栈B直接出栈。</p><pre><code class="lang-python"># -*- coding:utf-8 -*-class Solution:    def __init__(self):        self.stack0 = []        self.stack1 = []    def push(self, node):        # write code here        return self.stack0.append(node)    def pop(self):        # return xx        #出队：判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，栈B出栈；如果不为空，栈B直接出栈。        if self.stack1 == []:            while self.stack0:                self.stack1.append(self.stack0.pop())        return self.stack1.pop()</code></pre><p>2、用两个队列实现一个栈的功能？要求给出算法和思路！</p><p>方法：</p><p>入栈：将元素进队列A</p><p>出栈：判断队列A中元素的个数是否为1，如果等于1，则出队列，否则将队列A中的元素以此出队列并放入队列B，直到队列A中的元素留下一个，然后队列A出队列，再把队列B中的元素出队列以此放入队列A中。</p><h1 id="旋转数组最小数字"><a href="#旋转数组最小数字" class="headerlink" title="旋转数组最小数字"></a>旋转数组最小数字</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><p>解答：</p><p>方法1：遍历整个数组找到最小的元素。</p><p>方法2：因为是非递减数组旋转，利用二分法进行判断，</p><p>如果array[mid] > array[0]，则最小元素在mid的右边。找到的第一个小于array[mid]的元素即最小元素</p><p>如果<code>array[mid] &lt; array[0]</code>，则最小元素在mid的左边。找到的第一个大于array[mid]的元素，它的后一个元素即为最小元素</p><p>注意数组为0，返回0。</p><pre><code class="lang-python"># -*- coding:utf-8 -*-class Solution:    def minNumberInRotateArray(self, rotateArray):    # write code here        if len(rotateArray) == 0:            return 0        tmp = rotateArray[0]        for i in rotateArray:            if i &lt; tmp:                tmp = i        return tmp    #时间复杂度为O(lgn)，二分法    def minNumberInRotateArray(self, rotateArray):    # write code here        if len(rotateArray) == 0:            return 0        mid = int((len(rotateArray) - 1) / 2)        if rotateArray[mid] >= rotateArray[0]:            for i in rotateArray[mid:]:                if i &lt; rotateArray[mid]:                    return i        else:            for i in reversed(range(mid)):                if rotateArray[i] > rotateArray[mid]:                    return rotateArray[i + 1]</code></pre><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<code>n&lt;=39</code></p><p>解答：</p><p>方法：动态规划，一次的结果之和上两个数相关</p><pre><code># -*- coding:utf-8 -*-class Solution:    def Fibonacci(self, n):        # write code here        if n == 0:            return 0        elif n == 1:            return 1        elif n == 2:            return 1        else:            tag = []            tag.append(1)            tag.append(1)            for i in range(2,n):                tag.append(tag[i-1]+tag[i-2])        return tag[n-1]    #从0开始，第0项为0，如果从第一项开始，则为while n > 1:    def Fibonacci(self, n):        f = 0        s = 1        while n:            s = f + s            f = s - f            n -= 1        return f</code></pre><h1 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>解答：</p><p>方法：</p><p>a.如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);</p><p>b.假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)</p><p>c.由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)</p><p>d.然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2</p><p>e.可以发现最终得出的是一个斐波那契数列：</p><pre><code class="lang-python"># -*- coding:utf-8 -*-class Solution:    def jumpFloor(self, number):        # write code here        if number == 1:            return 1        elif number == 2:            return 2        else:            tag = []            tag.append(1)            tag.append(2)            for i in range(2, number):                tag.append(tag[i - 1] + tag[i - 2])        return tag[number-1]    def jumpFloor(self, number):        f = 1        s = 2        while number > 1:            s = f + s            f = s - f            number -= 1        return f</code></pre><h1 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>解答：</p><p>方法1：f(1) = 1</p><p>f(2) = f(2-1) + f(2-2) f(2-2)表示一次跳2级台阶</p><p>f(3) = f(3-1) + f(3-2) +f(3-3)</p><p>f(n) = f(n-1) +…+ f(n-(n-1)) + f(n-n)</p><p>​ = f(0) + f(1) +…+f(n-1)</p><p>f(n-1) = f(0) + f(1) +…+f(n-2)</p><p>f(n) = 2*f(n-1)</p><p>方法2：<strong>每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况</strong></p><pre><code class="lang-python"># -*- coding:utf-8 -*-class Solution:    def jumpFloorII(self, number):        # write code here        return 2**(number-1)    def jumpFloorII(self, number):        if number &lt;= 0:            return -1        elif number == 1:            return 1        return 2*self.jumpFloorII(number-1)</code></pre><h1 id="矩阵覆盖"><a href="#矩阵覆盖" class="headerlink" title="矩阵覆盖"></a>矩阵覆盖</h1><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p><p>解答:</p><p>方法：同上面的斐波那契数列，只是f(1) = 1,f(2) = 2</p><pre><code class="lang-python"># -*- coding:utf-8 -*-class Solution:    def rectCover(self, number):        # write code here            if number == 0:                return 0            if number == 1:                return 1            elif number == 2:                return 2            else:                tag = []                tag.append(1)                tag.append(2)                for i in range(2, number):                    tag.append(tag[i - 1] + tag[i - 2])            return tag[-1]    def rectCover(self, number):        if number == 0:            return 0        elif number == 1:            return 1        elif number == 2:            return 2        f = 1        s = 2        while number > 1:            s = s + f            f = s - f            number -= 1        return f</code></pre><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;牛客网剑指offer编程实践1-10题&lt;/p&gt;&lt;h1 id=&quot;二维数组中的查找&quot;&gt;&lt;a href=&quot;#二维数组中的查找&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="编程实践" scheme="https://cqupt-wan.github.io/categories/Coding/"/>
    
      <category term="剑指offer" scheme="https://cqupt-wan.github.io/categories/Coding/Sword-to-Offer/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建git博客</title>
    <link href="https://cqupt-wan.github.io/20190520-hexo-blog-optimization.html"/>
    <id>https://cqupt-wan.github.io/20190520-hexo-blog-optimization.html</id>
    <published>2019-05-20T01:41:08.000Z</published>
    <updated>2019-05-23T01:25:36.007Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要内容是本站博客使用Next主题的个性化定制和部分优化细节。最后<a href="https://cqupt-wan.github.io/">搭建的博客</a>。</p><h1 id="开始-Hexo-github搭建个人博客"><a href="#开始-Hexo-github搭建个人博客" class="headerlink" title="开始 Hexo+github搭建个人博客"></a>开始 Hexo+github搭建个人博客</h1><ul><li>Hexo博客搭建的基础流程为：<br>安装Node.js→安装Git→安装主题→注册给github并创建pages仓库→部署</li></ul><p>首先可以将Hexo<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方文档</a>看一遍，然后可以参考这篇文章<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a>进行配置。如果想将博客同步到coding上可以查看这篇文章：<a href="https://yangbingdong.com/2017/build-blog-hexo-base/#GitHub" target="_blank" rel="noopener">基于Hexo+Github+Coding搭建个人博客——基础篇(从菜鸟到放弃)</a>。之后在站点文件夹根目录，安装Git部署插件（以后所有安装的插件都在这个目录），输入下面命令：</p><pre><code class="lang-powershell">所在目录：~/Blog/npm install hexo-deployer-git --save</code></pre><p>然后在站点根目录下配置文件，编辑：</p><pre><code class="lang-powershell">文件位置：~/Blog/_config.ymlurl: https://cqupt-wan.github.io/..省略....# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository: git@github.com:CQUPT-Wan/CQUPT-Wan.github.io.git  branch: master  # other deployer  -type: leancloud_counter_security_sync</code></pre><p>将其中的cqupt-wan更改为你的git账号即可，可以执行<code>hexo s</code>在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 本地调试成功后，执行 <code>hexo clean && hexo g && hexo d</code> 上传到git博客上。</p><h2 id="站点根目录内容"><a href="#站点根目录内容" class="headerlink" title="站点根目录内容"></a>站点根目录内容</h2><p>建立好的站点根目录如下：</p><pre><code class="lang-yaml">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><p>每个文件或文件夹的功能如下：</p><ol><li><strong>_config.yml</strong></li></ol><p>站点博客的配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面。</p><ol><li><strong>package.json</strong></li></ol><p>应用程序信息，新添加的插件内容也会出现在这里面，我们可以不修改这里的内容。</p><ol><li><strong>scaffolds</strong></li></ol><p>scaffolds就是脚手架的意思，这里放了三个模板文件，分别是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。这部分可以修改的内容是，我们可以在模板上添加比如categories等自定义内容</p><ol><li><strong>source</strong></li></ol><p>source是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相应地增加文件夹。</p><ol><li><strong>themes</strong></li></ol><p>放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。初始状态下只有landscape一个文件夹，后续我们可以添加自己喜欢的。</p><h1 id="优化-基本功能配置"><a href="#优化-基本功能配置" class="headerlink" title="优化 基本功能配置"></a>优化 基本功能配置</h1><h2 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h2><p>两个Hexo主题下载的地方：</p><p>知乎话题：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a></p><p>Hexo官方：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a></p><p>然后使用clone的方式将主题下载，本站博客选用的是Hexo的next主题</p><pre><code class="lang-powershell">所在目录：~/Blog/git clone https://github.com/theme-next/hexo-theme-next themes/next</code></pre><p>clone完成后，修改配置文件中的theme选项</p><pre><code class="lang-powershell">文件位置：~/Blog/_config.yml## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next</code></pre><p>此外，可以在主题配置文件中修改next主题的不同风格，本站使用的是Mist风格</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#cheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini</code></pre><h2 id="设置Menu"><a href="#设置Menu" class="headerlink" title="设置Menu"></a>设置Menu</h2><p>默认只有首页和归档两个，如果还需要添加其他，需要修改主题配置文件：</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.ymlmenu:  home: / || home  //首页  about: /about/ || user  //关于  tags: /tags/ || tags  //标签  categories: /categories/ || th  //分类  archives: /archives/ || archive  //归档  #schedule: /schedule/ || calendar  //日程表  #sitemap: /sitemap.xml || sitemap  //站点地图  #commonweal: /404/ || heartbeat  //公益404</code></pre><p>修改完配置文件后，还需要创建对应的文件夹，以tags标签为例</p><pre><code class="lang-powershell">所在目录：~/Blog/hexo new page "tags"</code></pre><p>此外，还需要修改对应文件夹中的index.md文件，comment对应后面的评论系统</p><pre><code class="lang-powershell">文件位置：~/Blog/source/tags/index.md---title: 所有标签date: 2019-05-16 15:12:51type: "tags"comments: false---</code></pre><h2 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h2><p>修改主题配置文件，将enable改为true即可</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest:  enable: true  onmobile: true # display on mobile or not  color: "0,0,255" # RGB values, use ',' to separate  opacity: 0.5 # the opacity of line: 0~1  zIndex: -1 # z-index property of the background  count: 99 # the number of lines</code></pre><p>配置项说明：</p><ul><li><code>color</code> ：线条颜色, 默认: <code>'0,0,255'</code>；三个数字分别为(R,G,B)</li><li><code>opacity</code>： 线条透明度（0~1）, 默认: <code>0.5</code></li><li><code>count</code>：线条的总数量, 默认: <code>99</code></li><li><code>zIndex</code> ：背景的z-index属性，css属性用于控制所在层的位置, 默认: <code>-1</code></li></ul><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p>首先安装Hexo插件</p><pre><code class="lang-powershell">所在目录：~/Blog/ npm install --save hexo-generator-feed</code></pre><p>编辑站点配置文件</p><pre><code class="lang-powershell">文件位置：~/Blog/_config.yml## Plugins: https://hexo.io/plugins/plugins: hexo-generate-feed</code></pre><p>配置主题文件</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# Set rss to false to disable feed link.# Leave rss as blank to use site's feed link, and install hexo-generator-feed: `npm install hexo-generator-feed --save`.# Set rss to specific value if you have burned your feed already.rss: /atom.xml</code></pre><h2 id="修改链接样式"><a href="#修改链接样式" class="headerlink" title="修改链接样式"></a>修改链接样式</h2><pre><code class="lang-powershell">文件位置：~Blog/themes/next/source/css/_common/components/post/post.styl// 文章内链接文本样式.post-body p a {  color: #0593d3;  //原始链接颜色  border-bottom: none;  border-bottom: 1px solid #0593d3;  //底部分割线颜色  &:hover {    color: #fc6423;  //鼠标经过颜色    border-bottom: none;    border-bottom: 1px solid #fc6423;  //底部分割线颜色  }}</code></pre><h2 id="修改底部标签样式"><a href="#修改底部标签样式" class="headerlink" title="修改底部标签样式"></a>修改底部标签样式</h2><p>原本的标签是‘#’，感觉很丑，所有将<code>rel="tag">#</code>标签更改为<code>rel="tag">&lt;i class="fa fa-tag"&gt;</code>现在这个样子</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_macro/post.swig<xmp><div class="post-tags">          {% for tag in post.tags %}            <a href="{{ url_for(tag.path) }}" rel="tag"><i class="fa fa-tag"></i> {{ tag.name }}</a>          {% endfor %}        </div>        <i class="fa fa-tag"></xmp></code></pre><h2 id="在文章末尾添加“文章结束”标志"><a href="#在文章末尾添加“文章结束”标志" class="headerlink" title="在文章末尾添加“文章结束”标志"></a>在文章末尾添加“文章结束”标志</h2><p>首先新建<code>passage-end-tag.swig</code>文件</p><pre><code class="lang-powershell">所在目录：~/Blog/themes/next/layout/_macro//创建passage-end-tag.swig文件touch passage-end-tag.swig</code></pre><p>编辑该文件</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_macro/passage-end-tag.swig<xmp><div>    {% if not is_index %}        <div style="text-align:center;color:#ccc;font-size:14px">-------------本文结束啦<i class="fa fa-thumbs-up" aria-hidden="true"></i>感谢您的阅读-------------</div>    {% endif %}</div>;</xmp></code></pre><p>然后修改<code>post.swig</code>配置文件，在<code>END POST BODY</code>之后添加</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_macro\post.swig<xmp>{% if not is_index %}    <div>    {% include '../_macro/passage-end-tag.swig' %}    </div>    {% endif %}</xmp></code></pre><p>最后修改主题配置文件即可</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# 文章末尾添加“本文结束”标记passage_end_tag:  enabled: true</code></pre><h2 id="设置网站图标Favicon"><a href="#设置网站图标Favicon" class="headerlink" title="设置网站图标Favicon"></a>设置网站图标Favicon</h2><p>不论是网站的图标还是头像都存储在<code>~/Blog/themes/next/source/images</code>中，只需要将默认的图片替换掉即可</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.ymlfavicon:  small: /images/pikapika-16-16.png  medium: /images/pikapika-32-32.png  apple_touch_icon: /images/pikapika.png  safari_pinned_tab: /images/pikapika.svg  #android_manifest: /images/manifest.json  #ms_browserconfig: /images/browserconfig.xml</code></pre><p><a href="http://www.bejson.com/convert/image_to_svg/" target="_blank" rel="noopener">图片转svg在线生成器</a></p><h1 id="进阶-高级功能配置"><a href="#进阶-高级功能配置" class="headerlink" title="进阶 高级功能配置"></a>进阶 高级功能配置</h1><h2 id="添加热度"><a href="#添加热度" class="headerlink" title="添加热度"></a>添加热度</h2><p>进入<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fleancloud.cn%2F" target="_blank" rel="noopener">LeanCloud官网</a>，进行账号注册。登录后，进入控制台，创建应用，应用名为<code>Hexo</code>如下图所示：</p><p><img src="https://wx1.sinaimg.cn/large/005JV1Cwly1g3967rs6kwj30rs0fb0vo.jpg" alt="image"></p><p>创建应用后，点击存储，创建<strong>Class</strong>，<strong>Class</strong>命名为<strong>Counter</strong>，操作如下图所示：</p><p><img src="https://ws4.sinaimg.cn/large/005JV1Cwly1g3964gch27j30ie07y0u3.jpg" alt="image"></p><p><img src="https://wx2.sinaimg.cn/large/005JV1Cwly1g3968wb8w3j30rs0klwku.jpg" alt="image"></p><p>查看<strong>AppID</strong>和<strong>AppKey</strong>，如下图所示：</p><p><img src="https://wx2.sinaimg.cn/large/005JV1Cwly1g39699n2baj30n407sq2u.jpg" alt="image"></p><p>加入热度符号：</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_macro\post.swig<xmp>          {% if theme.leancloud_visitors.enable or (theme.valine.enable and theme.valine.appid and theme.valine.appkey and theme.valine.visitor) %}            <span id="{{ url_for(post.path) }}" class="leancloud_visitors" data-flag-title="{{ post.title }}">              <span class="post-meta-divider">|</span>              <span class="post-meta-item-icon">                <i class="fa fa-eye"></i>              </span>              {% if theme.post_meta.item_text %}                <span class="post-meta-item-text">{{ __('post.views') + __('symbol.colon') }}</span>              {% endif %}                <span class="leancloud-visitors-count"></span>                  <span>&#x2103;</span>            </span>          {% endif %}</xmp></span></code></pre><h2 id="添加来必力云跟帖功能"><a href="#添加来必力云跟帖功能" class="headerlink" title="添加来必力云跟帖功能"></a>添加来必力云跟帖功能</h2><p>首先去<a href="https://links.jianshu.com/go?to=https%3A%2F%2Flivere.com%2F" target="_blank" rel="noopener">来必力</a>注册账号，然后进入后台管理系统，如下图所示：</p><p><img src="https://wx2.sinaimg.cn/large/005JV1Cwly1g398j5wu1mj30f00c20tn.jpg" alt="image"></p><p>拷贝下图中的<code>data-uid</code></p><p><img src="https://ws1.sinaimg.cn/large/005JV1Cwly1g398ltds1uj30q50i60tj.jpg" alt="image"></p><p>编辑主题配置文件，将上面的<code>data-uid</code>粘贴到下面位置</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# LiveRe comments system# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid:</code></pre><p>当分类、标签、关于等组件需要隐藏评论功能时</p><ul><li>编辑<strong>index.md</strong>文件，添加<strong>comments</strong>将其值设为<strong>false</strong>:</li></ul><pre><code class="lang-powershell">文件位置：~/Blog/source/abouttitle: About Medate: 2019-05-16 16:04:06type: "about"comments: false</code></pre><h2 id="配置网站底部内容"><a href="#配置网站底部内容" class="headerlink" title="配置网站底部内容"></a>配置网站底部内容</h2><h3 id="底部隐藏Hexo强力驱动"><a href="#底部隐藏Hexo强力驱动" class="headerlink" title="底部隐藏Hexo强力驱动"></a>底部隐藏Hexo强力驱动</h3><ol><li>设置主题配置文件</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.ymlfooter:  # Specify the date when the site was setup. If not defined, current year will be used.  since: 2019</code></pre><ol><li>修改中文内容</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/languages/zh-CN.ymlfooter:  powered: "由 %s 个人专属"  theme: 主题  total_views: 总访问量  total_visitors: 总访客量</code></pre><ol><li>打开<code>Blog/themes/next/layout/_partials/footer.swig</code>，修改相应代码。</li></ol><pre><code>文件位置：~/Blog/themes/next/layout/_partials/footer.swig{% if theme.footer.powered.enable %}  <div class="powered-by">{#  #}{{ __('footer.powered', next_url('https://github.com/CQUPT-Wan', 'CQUPT-Wan', {class: 'theme-link'})) }}{#  #}{% if theme.footer.powered.version %} v{{ hexo_env('version') }}{% endif %}</div>{% endif %}</div></code></pre><h3 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h3><p>安装hexo插件，切换到根目录：</p><pre><code class="lang-powershell">根目录：~/Blognpm install hexo-wordcount --save</code></pre><p>在<code>~/Blog/themes/next/layout/_partials/footer.swig</code>添加代码：注意这段代码添加的位置和底部最后显示的位置相关，我是加在<code>author</code>后面</p><pre><code class="lang-powershell"> 文件位置：~/Blog/themes/next/layout/_partials/footer.swig <xmp> <span class="author" itemprop="copyrightHolder">{{ theme.footer.copyright || author }}</span>  <span class="post-meta-divider">|</span>  <div class="theme-info">      <div class="powered-by"></div>      <span class="post-count">博客全站共{{ totalcount(site) }}字</span>    </div></xmp></code></pre><h3 id="让页脚的心跳动起来"><a href="#让页脚的心跳动起来" class="headerlink" title="让页脚的心跳动起来"></a>让页脚的心跳动起来</h3><p>首先编辑主题配置文件</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.ymlicon:     # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons/    # `heart` is recommended with animation in red (#ff0000).    name: heart</code></pre><p>然后编辑</p><pre><code> 文件位置：~/Blog/themes/next/layout/_partials/footer.swig<span class="with-love" id="heart"></code></pre><p>最后编辑<code>custom.styl</code>，加入：</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/source/css/_custom/custom.styl// 自定义页脚跳动的心样式@keyframes heartAnimate {    0%,100%{transform:scale(1);}    10%,30%{transform:scale(0.9);}    20%,40%,60%,80%{transform:scale(1.1);}    50%,70%{transform:scale(1.1);}}#heart {    animation: heartAnimate 1.33s ease-in-out infinite;}.with-love {    color: rgb(255, 0, 0);}</code></pre><h2 id="添加DaoVoice在线联系"><a href="#添加DaoVoice在线联系" class="headerlink" title="添加DaoVoice在线联系"></a>添加DaoVoice在线联系</h2><ol><li>首先到<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.daocloud.io%2F" target="_blank" rel="noopener">DaoVoice</a>注册账号，登录成过后，进入到后台管理，点击<strong>应用设置——>安装到网站</strong>查看安装代码和AppID。</li><li>将安装代码添加到<code>Blog/themes/next/layout/_partials/head.swig</code>中：</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_partials/head.swig{% if theme.daovoice %}  <script>!function(e,t,o,i,a,c,n){e.DaoVoiceObject=a,e[a]=e[a]||function(){(e[a].q=e[a].q||[]).push(arguments)},e[a].l=1*new Date,c=t.createElement(o),n=t.getElementsByTagName(o)[0],c.async=1,c.src=i,c.charset="utf-8",n.parentNode.insertBefore(c,n)}(window,document,"script",("https:"==document.location.protocol?"https:":"http:")+"//widget.daovoice.io/widget/0f81ff2f.js","daovoice"),daovoice("init",{app_id:"{{theme.daovoice_app_id}}"}),daovoice("update")</script>{% endif %}</code></pre><ol><li>配置主题文件</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# Online contact daovoice: truedaovoice_app_id: ab02c609</code></pre><h2 id="Hexo博客添加站内搜索"><a href="#Hexo博客添加站内搜索" class="headerlink" title="Hexo博客添加站内搜索"></a>Hexo博客添加站内搜索</h2><ol><li><p>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。</p></li><li><p>安装 hexo-generator-search</p></li></ol><pre><code class="lang-powershell">目录：~/Blognpm install hexo-generator-search --save</code></pre><ol><li>安装 hexo-generator-searchdb</li></ol><pre><code class="lang-powershell">目录：~/Blognpm install hexo-generator-searchdb --save</code></pre><ol><li>编辑站点配置文件</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/_config.yml# 搜索search:  path: search.xml  field: post  format: html  limit: 10000</code></pre><ol><li>编辑主题配置文件，设置<code>Local search</code>enable为<code>ture</code></li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/_config.yml# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search:  enable: true  # If auto, trigger search by changing input.  # If manual, trigger search by pressing enter key or search button.  trigger: auto  # Show top n results per article, show all results by setting to -1  top_n_per_article: 1  # Unescape html strings to the readable one.  unescape: false</code></pre><h2 id="文章底部添加版权声明"><a href="#文章底部添加版权声明" class="headerlink" title="文章底部添加版权声明"></a>文章底部添加版权声明</h2><ol><li>在目录 <code>~/Blog/themes/next/layout/_macro/</code> 下添加 <code>my-copyright.swig</code> ，内容如下：</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_macro/my-copyright.swig<xmp>{% if page.copyright %}<div class="my_post_copyright">  <script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"></script>      <script src="https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"></script>  <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>  <p><span>本文标题:</span><a href="{{ url_for(page.path) }}">{{ page.title }}</a></p>  <p><span>文章作者:</span><a href="/" title="访问 {{ theme.author }} 的个人博客">{{ theme.author }}</a></p>  <p><span>发布时间:</span>{{ page.date.format("YYYY年MM月DD日 - HH:MM") }}</p>  <p><span>最后更新:</span>{{ page.updated.format("YYYY年MM月DD日 - HH:MM") }}</p>  <p><span>原始链接:</span><a href="{{ url_for(page.path) }}" title="{{ page.title }}">{{ page.permalink }}</a>    <span class="copy-path" title="点击复制文章链接"><i class="fa fa-clipboard" data-clipboard-text="{{ page.permalink }}" aria-label="复制成功！"></i></span>  </p>  <p><span>许可协议:</span><i class="fa fa-creative-commons"></i> <a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>  </div><script>var clipboard=new Clipboard(".fa-clipboard");$(".fa-clipboard").click(function(){clipboard.on("success",function(){swal({title:"",text:"复制成功",icon:"success",showConfirmButton:!0})})})</script>{% endif %}</xmp></code></pre><ol><li>在目录<code>~/Blog/themes/next/source/css/_common/components/post/</code>下添加文件<code>my-post-copyright.styl</code>，添加以下代码：</li></ol><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/source/css/_common/components/post/my-post-copyright.styl.my_post_copyright {  width: 85%;  max-width: 45em;  margin: 2.8em auto 0;  padding: 0.5em 1.0em;  border: 1px solid #d3d3d3;  font-size: 0.93rem;  line-height: 1.6em;  word-break: break-all;  background: rgba(255,255,255,0.4);}.my_post_copyright p{margin:0;}.my_post_copyright span {  display: inline-block;  width: 5.2em;  color: #b5b5b5;  font-weight: bold;}.my_post_copyright .raw {  margin-left: 1em;  width: 5em;}.my_post_copyright a {  color: #808080;  border-bottom:0;}.my_post_copyright a:hover {  color: #a3d2a3;  text-decoration: underline;}.my_post_copyright:hover .fa-clipboard {  color: #000;}.my_post_copyright .post-url:hover {  font-weight: normal;}.my_post_copyright .copy-path {  margin-left: 1em;  width: 1em;  +mobile(){display:none;}}.my_post_copyright .copy-path:hover {  color: #808080;  cursor: pointer;}</code></pre><ol><li>修改<code>~/Blog/themes/next/layout/_macro/post.swig</code>，在<code>END POST BODY</code>后面添加以下代码：</li></ol><pre><code class="lang-html">文件位置：~/Blog/themes/next/layout/_macro/post.swig<xmp><div>      {% if not is_index %}        {% include 'my-copyright.swig' %}      {% endif %}    </div></xmp></code></pre><ol><li>在<code>~/Blog/themes/next/source/css/_common/components/post/post.styl</code>文件最后加入下面的代码：<code>@import "my-post-copyright"</code></li></ol><h2 id="修改网站url"><a href="#修改网站url" class="headerlink" title="修改网站url"></a>修改网站url</h2><p>因为写的博客存在中文标题，如果直接用默认的<code>url</code>会出现中文，这样容易出现网址Bug。修改方式如下</p><pre><code class="lang-powershell">文件位置：~/Blog/_config.yml#permalink: :year/:month/:day/:title/permalink: :year:month:day-:url_name.htmlpermalink_defaults:    url_name: index</code></pre><p>这里的<code>url_name</code>需要在每篇新建博客的<code>.md</code>文件中设置你想设置的网址名，如果嫌麻烦可以修改模板</p><pre><code>文件位置：~/Blog/scaffolds/post.md---title: {{ title }}url_name: date: {{ date }}tags:categories:copyright:---</code></pre><p>对于标签中的中文，可以编辑站点配置文件进行设定：</p><pre><code class="lang-powershell">文件位置：~/Blog/_config.yml# Category & Tagdefault_category: uncategorized# URL 中的分类和标签「翻译」成英文category_map:        机器学习: MachineLearning        自然语言处理: NLP        深度学习: DeepLearning        数据结构: DataStructure        编程实践: Codingtag_map:</code></pre><h2 id="侧栏加入已运行时间"><a href="#侧栏加入已运行时间" class="headerlink" title="侧栏加入已运行时间"></a>侧栏加入已运行时间</h2><p>首先加入下面代码</p><pre><code class="lang-html">文件位置：~/Blog/themes/next/layout/_custom/sidebar.swig<xmp><div id="days"></div><script>function show_date_time(){window.setTimeout("show_date_time()", 1000);BirthDay=new Date("05/15/2019 15:13:14");today=new Date();timeold=(today.getTime()-BirthDay.getTime());sectimeold=timeold/1000secondsold=Math.floor(sectimeold);msPerDay=24*60*60*1000e_daysold=timeold/msPerDaydaysold=Math.floor(e_daysold);e_hrsold=(e_daysold-daysold)*24;hrsold=setzero(Math.floor(e_hrsold));e_minsold=(e_hrsold-hrsold)*60;minsold=setzero(Math.floor((e_hrsold-hrsold)*60));seconds=setzero(Math.floor((e_minsold-minsold)*60));document.getElementById('days').innerHTML="已运行 "+daysold+" 天 "+hrsold+" 小时 "+minsold+" 分 "+seconds+" 秒";}function setzero(i){if (i<10){i="0" + i};return i;}show_date_time();</script></xmp></code></pre><p>上面<code>Date</code>需要修改为你自己的，然后修改文件：</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/layout/_macro/sidebar.swig\<xmp>            <ul class="links-of-blogroll-list">              {% for name, link in theme.links %}                <li class="links-of-blogroll-item">                  <a href="{{ link }}" title="{{ name }}" target="_blank">{{ name }}</a>                </li>              {% endfor %}            </ul>+        {% include '../_custom/sidebar.swig' %}          </div>         {% endif %}-        {% include '../_custom/sidebar.swig' %}</xmp></code></pre><p>如果需要修改颜色，则可以修改<code>custom.styl</code></p><pre><code>// 自定义的侧栏时间样式#days {    display: block;    color: #f56e25;    font-size: 10px;    margin-top: 10px;}    .site-overview {    text-align: center;}</code></pre><h2 id="设置页面内容居中"><a href="#设置页面内容居中" class="headerlink" title="设置页面内容居中"></a>设置页面内容居中</h2><p>本博客使用的主题是Next.Mist，首页内容默认为</p><p><img src="https://ws1.sinaimg.cn/large/005JV1Cwly1g3az83fntuj30ov09ft92.jpg" alt="image"></p><p>如果想修改标题的位置居中或者‘阅读全文’居中，首先可以<code>F12</code>审查元素查看要修改内容的class，然后进行修改</p><pre><code class="lang-powershell">文件位置：~/Blog/themes/next/source/css/_schemes/Mist/_posts-expanded.styl// Post Expanded// --------------------------------------------------.posts-expand {  padding-top: 0;  .post-title,  .post-meta {    text-align: center $site-meta-text-align;  //文章属性位置    +mobile() { text-align: center; }  }  .post-eof { display: none; }  .post { margin-top: 120px; }  .post:first-child { margin-top: 0; }  .post-meta {    margin-top: 5px;    margin-bottom: 20px;  }  .post-title {    position: center;  //文章标题位置    font-size: $font-size-headings-base;    font-weight: 400;    +mobile() { font-size: $font-size-headings-small; }    +desktop-large() { font-size: $font-size-headings-large; }  }  .post-title:hover:before { background: $black-deep; }  .post-body {    +mobile() { font-size: $font-size-base; }  }  .post-body img { margin: 0; }  .post-tags {    text-align: left;    a {      padding: 1px 5px;      background: $whitesmoke;      border-bottom: none;    }    a:hover { background: $grey-light; }  }  .post-nav { margin-top: 40px; }}.post-button {  margin-top: 20px;  text-align: right;  //阅读全文位置  a {    padding: 0;    font-size: $font-size-base;    //color: $grey-dim;    background: none;    border: none;    border-bottom: 2px solid $grey-dim;    transition-property: border;    +mobile() { font-size: $font-size-small; }    +desktop-large() { font-size: $font-size-large; }    &:hover { border-bottom-color: $black-deep; }  }}</code></pre><p>如果要修改其他主题的内容位置，将<code>~/Blog/themes/next/source/css/_schemes/Mist/_posts-expanded.styl</code>中的<code>Mist</code>修改即可。</p><h2 id="参考大佬的文章"><a href="#参考大佬的文章" class="headerlink" title="参考大佬的文章"></a>参考大佬的文章</h2><blockquote><table><tbody><tr><td bgcolor="LemonChiffon"><font size="3">tips：大佬的博客可不仅仅有一篇文章，多在上面逗留会，也许会有甜品。</font></td></tr></tbody></table></blockquote><ol><li><p><a href="https://io-oi.me/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#fn:2" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></p></li><li><p><a href="http://shenzekun.cn/hexo的next主题个性化配置教程.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p></li><li><p><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">Hext-Next配置超炫网页效果</a></p></li></ol><blockquote><table><tbody><tr><td bgcolor="LemonChiffon"><font size="4.5">最后如果转载，麻烦留个本文的链接，因为如果读者或我自己发现文章有错误，我会在这里更正，留个本文的链接，防止我暂时的疏漏耽误了他人宝贵的时间。</font></td></tr></tbody></table></blockquote><!-- rebuild by neat --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本文主要内容是本站博客使用Next主题的个性化定制和部分优化细节。最后&lt;a href=&quot;https://cqupt-wan.github.io/&quot;&gt;搭建的博客&lt;/a&gt;。&lt;/p&gt;&lt;h1 id=&quot;开始-Hexo-github搭建个人博客&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="hexo" scheme="https://cqupt-wan.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="https://cqupt-wan.github.io/tags/Hexo/"/>
    
      <category term="git" scheme="https://cqupt-wan.github.io/tags/git/"/>
    
  </entry>
  
</feed>
